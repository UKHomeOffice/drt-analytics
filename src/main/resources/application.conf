portcode = "xxx"
portcode = ${?PORT_CODE}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  loglevel = ${?ENV_LOG_LEVEL}
  jvm-exit-on-fatal-error = true
  actor {
    serializers {
      protobuf = "uk.gov.homeoffice.drt.analytics.serializers.ProtoBufSerializer"
    }
    serialization-bindings {
      "server.protobuf.messages.FlightsMessage.FlightsDiffMessage" = protobuf
      "server.protobuf.messages.FlightsMessage.FlightStateSnapshotMessage" = protobuf
      "server.protobuf.messages.FlightsMessage.FeedStatusMessage" = protobuf
      "server.protobuf.messages.FlightsMessage.FeedStatusesMessage" = protobuf
    }
  }
  extensions = [akka.persistence.Persistence]
  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
  http {
    client.parsing.illegal-header-warnings = off
  }
}

jdbc-journal {
  slick = ${slick}
  recovery-event-timeout = 240s
  recovery-event-timeout = ${?RECOVERY_TIMEOUT}

  circuit-breaker {
    max-failures = 5
    call-timeout = 120s
    call-timeout = ${?SNAPSHOT_CALL_TIMEOUT}
    reset-timeout = 60s
  }
}

jdbc-read-journal {
  slick = ${slick}
  recovery-event-timeout = 240s
  recovery-event-timeout = ${?RECOVERY_TIMEOUT}

  circuit-breaker {
    max-failures = 5
    call-timeout = 120s
    call-timeout = ${?SNAPSHOT_CALL_TIMEOUT}
    reset-timeout = 60s
  }
}

jdbc-snapshot-store {
  slick = ${slick}
  circuit-breaker {
    max-failures = 5
    call-timeout = 120s
    call-timeout = ${?SNAPSHOT_CALL_TIMEOUT}
    reset-timeout = 60s
  }
}

use-pg-ssl = true
use-pg-ssl = ${?USE_PG_SSL}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    connectionPool = "HikariCP"
    host = "localhost"
    host = ${?POSTGRES_HOST}
    url = "jdbc:postgresql://"${slick.db.host}":5432/"${portcode}"?reWriteBatchedInserts=true&ssl="${use-pg-ssl}
    user = ""${portcode}""
    user = ${?POSTGRES_USER}
    password = ""${portcode}""
    password = ${?POSTGRES_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 1
    numThreads = ${?AKKADB_THREADS}
    maxConnections = 1
    maxConnections = ${?AKKADB_MAX_CONNECTIONS}
  }
}
